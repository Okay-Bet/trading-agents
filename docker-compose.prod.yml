version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: pamela
      POSTGRES_PASSWORD: ${DB_PASSWORD:-pamela_prod}
      POSTGRES_DB: pamela_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pamela"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Agent backend service (production)
  agent:
    build:
      context: .
      dockerfile: apps/agent/Dockerfile.prod
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # Database
      DATABASE_URL: postgresql://pamela:${DB_PASSWORD:-pamela_prod}@postgres:5432/pamela_db
      PGLITE_DATA_DIR: /app/data
      
      # API Keys
      OPENAI_API_KEY: ${OPENAI_API_KEY:?OPENAI_API_KEY is required}
      POLYMARKET_PRIVATE_KEY: ${POLYMARKET_PRIVATE_KEY:?POLYMARKET_PRIVATE_KEY is required}
      CLOB_API_URL: ${CLOB_API_URL:-https://clob.polymarket.com/}
      
      # Trading Config
      TRADING_ENABLED: ${TRADING_ENABLED:-true}
      MAX_POSITION_SIZE: ${MAX_POSITION_SIZE:-100}
      MIN_CONFIDENCE_THRESHOLD: ${MIN_CONFIDENCE_THRESHOLD:-0.7}
      
      # Service Config
      PORT: 3000
      NODE_ENV: production
    ports:
      - "3000:3000"
      - "3001:3001"
    volumes:
      - agent_data:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web frontend service (production)
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile.prod
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost:3000}
    depends_on:
      agent:
        condition: service_healthy
    environment:
      PORT: 80
    ports:
      - "80:80"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  agent_data: