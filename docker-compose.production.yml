version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-pamela}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-pamela_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-pamela}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Agent backend service
  agent:
    build:
      context: .
      dockerfile: apps/agent/Dockerfile.production
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-pamela}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-pamela_db}
      
      # Core settings
      NODE_ENV: production
      PORT: 3000
      
      # API Keys
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      POLYMARKET_PRIVATE_KEY: ${POLYMARKET_PRIVATE_KEY}
      CLOB_API_URL: ${CLOB_API_URL:-https://clob.polymarket.com/}
      
      # Trading Config
      TRADING_ENABLED: ${TRADING_ENABLED:-true}
      MAX_POSITION_SIZE: ${MAX_POSITION_SIZE:-100}
      MIN_CONFIDENCE_THRESHOLD: ${MIN_CONFIDENCE_THRESHOLD:-0.7}
      
      # Optional integrations
      TAVILY_API_KEY: ${TAVILY_API_KEY}
      NEWS_API_KEY: ${NEWS_API_KEY}
      TWITTER_USERNAME: ${TWITTER_USERNAME}
      TWITTER_PASSWORD: ${TWITTER_PASSWORD}
      TWITTER_EMAIL: ${TWITTER_EMAIL}
      DISCORD_BOT_TOKEN: ${DISCORD_BOT_TOKEN}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
    ports:
      - "${AGENT_PORT:-3000}:3000"
    volumes:
      - agent_data:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Web frontend service
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile.production
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost:3000}
    depends_on:
      agent:
        condition: service_healthy
    ports:
      - "${WEB_PORT:-80}:80"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Nginx reverse proxy for both services
  nginx:
    image: nginx:alpine
    depends_on:
      - agent
      - web
    volumes:
      - ./nginx.production.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "${NGINX_PORT:-443}:443"
      - "${NGINX_HTTP_PORT:-80}:80"
    restart: unless-stopped

volumes:
  postgres_data:
  agent_data: